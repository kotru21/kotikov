import React from "react";
import { colors } from "../../styles/colors";

interface TimelinePointProps {
  type: "work" | "education" | "project" | "hackathon";
  index: number;
}

const TimelinePoint: React.FC<TimelinePointProps> = ({ type, index }) => {
  const getTypeColor = (type: string) => {
    switch (type) {
      case "work":
        return { backgroundColor: colors.neutral[700] };
      case "education":
        return { backgroundColor: colors.semantic.info.DEFAULT };
      case "project":
        return { backgroundColor: colors.semantic.success.DEFAULT };
      case "hackathon":
        return { backgroundColor: colors.semantic.warning.DEFAULT };
      default:
        return { backgroundColor: colors.neutral[500] };
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "work":
        return "üíº";
      case "education":
        return "üéì";
      case "project":
        return "üöÄ";
      case "hackathon":
        return "‚ö°";
      default:
        return "‚Ä¢";
    }
  };

  const getWaveOffset = (index: number) => {
    // –°–æ–∑–¥–∞–µ–º –≤–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ SVG –≤–æ–ª–Ω–µ
    const wavePattern = [0, -20, 20, -20, 20]; // –°–º–µ—â–µ–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö –¥–ª—è –±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π –≤–æ–ª–Ω—ã
    return wavePattern[index % wavePattern.length] || 0;
  };

  return (
    <div
      className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-10"
      style={{
        top: `calc(50% + ${getWaveOffset(index)}px)`,
      }}>
      <div
        className="w-8 h-8 rounded-full border-4 border-white dark:border-neutral-900 shadow-lg flex items-center justify-center transition-transform duration-300 hover:scale-125"
        style={getTypeColor(type)}>
        <span className="text-sm">{getTypeIcon(type)}</span>
      </div>
    </div>
  );
};

export default TimelinePoint;
